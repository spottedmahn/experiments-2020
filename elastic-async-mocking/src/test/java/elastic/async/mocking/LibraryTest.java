/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package elastic.async.mocking;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.elasticsearch.client.Cancellable;
import org.elasticsearch.client.RestHighLevelClient;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class LibraryTest {
    @Test
    void testSomeLibraryMethod() {
        var restHighLevelClient = mock(RestHighLevelClient.class);
        when(restHighLevelClient.indexAsync(any(), any(), any())).then(answer -> {
            var arguments = answer.getArguments();
            var thirdArg = arguments[2];
            return null;
        });
        var classUnderTest = new Library(restHighLevelClient);
        classUnderTest.doIt(null);
    }

    @Mock
    RestHighLevelClient restHighLevelClient2;

    @Test
    void testSomeLibraryMethod2() {
        doReturn(mock(Cancellable.class)).when(restHighLevelClient2)
                .indexAsync(any(), any(), any());
        var classUnderTest = new Library(restHighLevelClient2);
        classUnderTest.doIt(null);
    }

    @Test
    void finalMockTest() {
        var lib = mock(Library.class);
        when(lib.mockFinalTest()).thenReturn("hello world");
    }

    @Test
    void nonFinalMockTest() {
        var lib = mock(Library.class);
        when(lib.mockNonFinalTest()).thenReturn("hello world");
    }
}
