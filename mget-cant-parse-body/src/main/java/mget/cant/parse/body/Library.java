/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mget.cant.parse.body;

import java.io.IOException;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.get.MultiGetRequest;
import org.elasticsearch.action.get.MultiGetResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestHighLevelClient;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
public class Library {

  private final RestHighLevelClient restHighLevelClient;
  private final ObjectMapper mapper;

  CompletionStage<Boolean> doIt() {

    log.info("start of doIt()");

    var result = new CompletableFuture<Boolean>();
    var multiGetRequest = new MultiGetRequest();
    multiGetRequest.add(new MultiGetRequest.Item("dont-care", "1"));

    restHighLevelClient.mgetAsync(multiGetRequest, RequestOptions.DEFAULT, new ActionListener<MultiGetResponse>() {
      @Override
      public void onResponse(MultiGetResponse response) {
        for (var responseItem : response.getResponses()) {
          // convert response to a Customer object
          // source is null as my index is empty
          // this causes a NPE
          log.info("getting source bytes to convert to a POJO");
          // var documentSourceBytes = responseItem.getResponse()
          //     .getSourceAsBytes();
          Customer customer = null;
          try {
            // source is null as my index is go
            byte[] nullBytes = null;
            log.info("converting source to POJO");
            customer = mapper.readValue(nullBytes, Customer.class);
          } catch (IOException e) {
            log.error("error converting source to POJO", e);
            result.completeExceptionally(e);
          }
        }
        result.complete(true);
      }

      @Override
      public void onFailure(Exception ex) {
        //the real problem!!!
        //log.error("ex.cause", ex.getCause());
        log.error("error with mget", ex);
        result.completeExceptionally(ex);
      }
    });

    return result;
  }

  CompletionStage<Boolean> doIt2() {

    log.info("start of doIt2()");

    var result = new CompletableFuture<Boolean>();
    var multiGetRequest = new MultiGetRequest();
    multiGetRequest.add(new MultiGetRequest.Item("dont-care", "1"));

    restHighLevelClient.mgetAsync(multiGetRequest, RequestOptions.DEFAULT, new ActionListener<MultiGetResponse>() {
      @Override
      public void onResponse(MultiGetResponse response) {
        for (var responseItem : response.getResponses()) {
          try {
            // response is null as that index doesn't exist
            // this causes a NPE
            log.info("getting source bytes to convert to a POJO");
            var documentSourceBytes = responseItem.getResponse()
                .getSourceAsBytes();
          } catch (Exception e) {
            log.error("error converting getting source bytes", e);
            result.completeExceptionally(e);
          }
        }
        result.complete(true);
      }

      @Override
      public void onFailure(Exception e) {
        log.error("error with mget", e);
        result.completeExceptionally(e);
      }
    });

    return result;
  }
}
