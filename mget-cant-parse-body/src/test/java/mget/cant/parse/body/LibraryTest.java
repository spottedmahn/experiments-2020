/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mget.cant.parse.body;

import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.concurrent.ExecutionException;

import com.fasterxml.jackson.databind.ObjectMapper;

import org.apache.http.HttpHost;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestHighLevelClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class LibraryTest {

    private RestHighLevelClient restHighLevelClient;
    private ObjectMapper objectMapper;

    @BeforeEach
    void beforeEach() {
        var httpHost = new HttpHost("localhost", 9200, "http");
        restHighLevelClient = new RestHighLevelClient(RestClient.builder(httpHost));
        objectMapper = new ObjectMapper();
        ObjectMapper.findModules();
    }

    @Test
    @DisplayName("IOException in onResponse, the real error getting buried in ex.getCause()")
    void doIt() throws InterruptedException, ExecutionException {
        var classUnderTest = new Library(restHighLevelClient, objectMapper);
        assertTrue(classUnderTest.doIt()
                .toCompletableFuture()
                .get());
    }

    @Test
    @DisplayName("NPE in onResponse")
    void doIt2() throws InterruptedException, ExecutionException {
        var classUnderTest = new Library(restHighLevelClient, objectMapper);
        assertTrue(classUnderTest.doIt2()
                .toCompletableFuture()
                .get());
    }
}
