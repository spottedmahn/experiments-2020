/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package unit.testing.resilience4j.retry;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;

import com.google.common.util.concurrent.ThreadFactoryBuilder;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;

import io.github.resilience4j.core.IntervalFunction;
import io.github.resilience4j.retry.Retry;
import io.github.resilience4j.retry.RetryConfig;

class LibraryTest {

    Retry retry;
    ScheduledExecutorService realScheduler;

    @Mock
    ScheduledExecutorService mockScheduler;

    @BeforeEach
    void beforeEach() {
        retry = retrier();
        realScheduler = scheduler();
    }

    @Test
    void completes() throws InterruptedException, ExecutionException {
        var classUnderTest = new Library(retry, mockScheduler);
        var actual = classUnderTest.doesntTriggersRetry()
                .toCompletableFuture()
                .get();
        assertTrue(actual);
    }

    @Test
    void completesWithRealScheduler() throws InterruptedException, ExecutionException {
        var classUnderTest = new Library(retry, realScheduler);
        assertThrows(Exception.class, () -> {
            classUnderTest.triggersRetry()
                    .toCompletableFuture()
                    .get();
        });
    }

    @Test
    void doesntCompleteWithMockScheduler() throws InterruptedException, ExecutionException {
        var classUnderTest = new Library(retry, mockScheduler);
        assertThrows(Exception.class, () -> {
            classUnderTest.triggersRetry()
                    .toCompletableFuture()
                    .get();
        });
    }

    ScheduledExecutorService scheduler() {
        return Executors.newScheduledThreadPool(10, new ThreadFactoryBuilder().setNameFormat("My tests" + "-%d")
                .build());
    }

    Retry retrier() {
        return Retry.of("Blah", RetryConfig.custom()
                .maxAttempts(10)
                .intervalFunction(IntervalFunction.ofExponentialRandomBackoff(100, 1.5, 0.5))
                .build());
    }
}
